{"version":3,"sources":["components/Button.jsx","components/Display.jsx","components/Layout.jsx","App.js","index.js"],"names":["Button","value","onClick","id","className","Display","fontSize","topValues","bottomValue","bn","length","style","Layout","display","buttons","DIGIT","OPERATOR","App","useState","currentValue","setCurrentValue","lastClicked","setLastClicked","lastOperatorUsed","setLastOperatorUsed","history","setHistory","memoryValue","setMemoryValue","isDisabled","setIsDisabled","handleDigit","digit","reachedLimit","includes","handleOperator","operator","slice","concat","updateResult","calculate","setTimeout","join","parseFloat","toString","a","b","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd58eade.chunk.js","sourcesContent":["import React from 'react';\nimport '../Button.scss'\n\nexport default function Button({value, onClick, id}) {\n\n\n    return(\n       <button onClick={() => {onClick(value)}} \n       className={`Button  ${ (value === 'x' || value === '-' || value === '+' || value === '/' || value === '=') ? \"operator\" :\"\" } ${ (value === 'AC' || value === '0') ? \"large\" :\"\" }`} \n       value={value} id={id}>{value}</button>\n    )\n}\n","import React from 'react';\nimport '../Display.scss';\n\nexport default function Display({ topValues, bottomValue,id }) {\n\n    // change font size\n\n    let fontSize, bn = bottomValue.length;\n\n    if (bn <=8) fontSize = '2.5rem';\n    if (bn > 8 ) fontSize = '2.25rem';\n    if (bn > 10) fontSize = '2rem'; \n    if (bn >13 ) fontSize = '1.5rem';\n    if (bn > 17)fontSize = '1.125rem'\n    \n    return(\n<div className=\"Display\" >\n    <div className=\"topValues\"> {topValues} </div>\n    <div className=\"bottomValue\" id={id} style = {{ fontSize }}> {bottomValue} </div>\n</div>\n    );\n}","import React from 'react';\nimport '../Layout.scss';\n\nexport default function Layout({display, buttons}) {\n    return(\n        <div className='Layout'>\n            <div className='container'>\n                <div className='display'>\n                    {display}\n                </div>\n                <div className='buttons'>\n                    {buttons}\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport Button from './components/Button.jsx';\nimport Display from './components/Display.jsx';\nimport Layout from './components/Layout';\nimport './App.css';\n\nconst DIGIT = 'DIGIT';\nconst OPERATOR = 'OPERATOR';\n\nexport default function App() {\n\n    const [currentValue, setCurrentValue] = useState('0');\n    const [lastClicked, setLastClicked] = useState(null);\n    const [lastOperatorUsed, setLastOperatorUsed] = useState(null);\n    const [history, setHistory] = useState([]);\n    const [memoryValue, setMemoryValue] = useState(null);\n    const [isDisabled, setIsDisabled] = useState(false);\n\n\n    // DIGIT\n    const handleDigit = (digit) => {\n    \n    if (isDisabled) return;\n    if (reachedLimit()) return;\n\n    // Prevent multiple zeros\n    if (currentValue === '0' && digit === '0') return;\n    \n    // Add zero before decimal point\n    if (currentValue === '0'  && digit === '.') {\n        setCurrentValue('0.');\n      }\n    if (currentValue === '-' && digit === '.') {   \n      setCurrentValue('-0.');\n    }\n\n    // If clicked on decimal and there is already a decimal point\n    if (digit==='.' && currentValue.includes('.')) return;\n    \n    // Clicked on digit right after clicking on equals - clear memory\n    if (lastOperatorUsed === '=') {\n        setCurrentValue(digit === '.'? '0.' : digit);\n        setMemoryValue(null);\n        setLastOperatorUsed(null);\n        setHistory([]);\n    }\n\n    // If current value is zero or is empty\n    else if ((currentValue === '0' && digit !== '.' ) || currentValue === '') {\n        setCurrentValue(digit);\n    }\n\n    // If previously clicked on digit or current value is negative sign\n    else if ((lastClicked === DIGIT) || (currentValue === '-' && digit !=='.')) {\n        setCurrentValue(currentValue + digit);\n     }\n\n    // If last time clicked on operator\n    else if (lastClicked === OPERATOR && currentValue !== '-') {\n\n    // Store current value in memory and set current value to clicked digit\n    setCurrentValue((digit === '.' && currentValue !== '-') ? '0.' : (digit === '.' && currentValue === '-') ? '-0.' : digit);\n    setMemoryValue(currentValue);\n  }\n\n    setLastClicked(DIGIT);\n\n}\n\n// operators\n\nconst handleOperator = (operator) => {\n\n    if (isDisabled) return;\n\n    // If clicked on operator with no current value - exclude '-'\n    if (lastOperatorUsed === null && lastClicked !== DIGIT && operator !== '-') return;\n\n    if (lastOperatorUsed === '=' & operator === '=') return;\n\n    if (currentValue === '0.' || currentValue === '-0.') return;\n\n    // Set current value to negative\n    if ((currentValue === '0' || currentValue === \"\") && operator === '-') {\n      setCurrentValue('-'); \n  }\n\n    // Clicked the same operator twice, do nothing - exclude '-'\n    if (lastClicked === OPERATOR && (lastOperatorUsed === operator && operator !== \"-\")) return;\n\n     // If current value is zero, empty and clicked on -\n    if ((currentValue === '0' || currentValue === '') && operator ==='-'){\n      setCurrentValue('-');\n     }\n\n\n    // Repetedly clicked on operator, assign the latest - exclude '-'\n    else if (lastClicked === OPERATOR && lastOperatorUsed !== '=' && lastOperatorUsed !== '-' && operator !== '-' ) {\n\n        if (currentValue === '-') {\n          setCurrentValue('0')\n        }\n        setLastOperatorUsed(operator);\n        setHistory((history.slice(0,-1)).concat(operator));        \n   }\n\n    // Clicked on '-' after clicking anithe roperator, set current value to nagative\n   else if (lastClicked === OPERATOR && lastOperatorUsed !== '=' && operator === '-') {\n    setCurrentValue('-')     \n}\n\n   // Right after clinking on equals clikced on operator\n   else if (lastOperatorUsed === '=') {\n    setMemoryValue(currentValue);\n    setHistory([currentValue, operator]);\n    setLastOperatorUsed(operator);\n   }\n\n    else if (lastClicked === DIGIT) {\n    updateResult();\n    setHistory(history.concat([currentValue, operator]));\n    setLastOperatorUsed(operator);\n  }\n\n    setLastClicked(OPERATOR);\n\n}\n\n  // Updates result\n  const updateResult = () => {\n    // There is something in memory\n    if (memoryValue) {\n      // Calculate the result and clear memory\n      setCurrentValue(calculate(memoryValue, currentValue, lastOperatorUsed));\n      setMemoryValue(null);\n    } else {\n      // There is nothing in memory so update memory\n      setMemoryValue(currentValue);\n    }\n  };\n\n  // PLUS / MINU\n  const handlePlusMinus = () => { \n\n    if (currentValue === \"ERROR\" || currentValue === \"0\" || currentValue === \"\" ) return;\n    setCurrentValue(currentValue > 0 ? '-' + currentValue : currentValue.slice(1));\n  }\n\n// PERCENTAGE\n  if (currentValue === \"ERROR\") return;\n  const handlePercentage = () => {\n    setCurrentValue((parseFloat(currentValue)/100).toString());\n  }\n\n// DIVIDE BY\nconst handleDivide = () => {\n\n    if (currentValue === \"0\" || currentValue === \"\") {\n      setCurrentValue('ERROR');\n        setHistory([]);\n        setLastClicked(null);\n        setLastOperatorUsed(null);\n        setMemoryValue(null);\n\n        setTimeout(() => {\n          setCurrentValue('0')\n        },1250)\n\n    } else  { \n      setCurrentValue((1/parseFloat(currentValue)).toString());\n    }\n}\n\n// EQUALS\nconst handleEquals = () => {\n\n    if (isDisabled) return;\n\n    // If last clicked on equals or there is nothing to calculate\n    if (lastOperatorUsed === '=' || lastOperatorUsed === null) return;\n\n    // User is trying to divide by zero\n    if (lastOperatorUsed === '/' && currentValue === '0') {\n        setCurrentValue('ERROR');\n        setHistory([]);\n        setLastClicked(null);\n        setLastOperatorUsed(null);\n        setMemoryValue(null);\n\n        setTimeout(() => {\n          setCurrentValue('0')\n        },1250)\n    }\n    // Clicked on equals right after clicking on operator\n    else if (lastClicked === OPERATOR && !memoryValue) {\n        setHistory(history.slice(0, -1).concat(['=', currentValue]));\n    } else {\n     // Update current value and history\n     updateResult();\n     setHistory(\n       history.concat([\n         currentValue,\n         '=',\n         calculate(memoryValue, currentValue, lastOperatorUsed),\n       ])\n     );\n };\n\n setLastClicked(OPERATOR);\n setLastOperatorUsed('=');\n}\n\n// Clear All\nconst handleClear = () => {\n    setCurrentValue('0');\n    setLastClicked(null);\n    setLastOperatorUsed(null);\n    setHistory([]);\n    setMemoryValue(null)\n    setIsDisabled(false)  \n}\n\n// Digit limit\nconst reachedLimit = () => {\n    if (currentValue.length > 10 && lastClicked === DIGIT) { \n        \n        setTimeout(() => {\n            setCurrentValue(currentValue);\n            setIsDisabled(false);\n          }, 1250);\n\n        setCurrentValue('LIMIT REACHED');\n        setIsDisabled(true);\n        return true;\n    }\n    }\n\nfunction calculate(a,b,operator) {\n    a = parseFloat(a);\n    b = parseFloat(b);\n\n    let result;\n    switch(operator) {\n        case '+':\n            result = a+b;\n            break;\n        case '-':\n            result = a-b;\n            break;\n        case 'x':\n            result = a*b;\n            break;\n        case '/':\n            result = a/b;\n    }\n    return result.toString();\n}\n\nreturn(\n    <Layout\n      display={<Display id=\"display\" topValues={history.join(' ')} bottomValue={currentValue}/>} \n      buttons={\n        <>\n        <Button id=\"clear\" onClick={handleClear} value=\"AC\" />\n        <Button id=\"delete\" onClick={handleDivide} value=\"1/x\" />\n        <Button id=\"plusMinus\" onClick={handlePlusMinus} value=\"+/-\" />\n        <Button id=\"divide\" onClick={handleOperator} value=\"/\" />\n\n        <Button id=\"seven\" onClick={handleDigit} value=\"7\" />\n        <Button id=\"eight\" onClick={handleDigit} value=\"8\" />\n        <Button id=\"nine\" onClick={handleDigit} value=\"9\" />\n        <Button id=\"multiply\" onClick={handleOperator} value=\"x\" />\n\n        <Button id=\"four\" onClick={handleDigit} value=\"4\" />\n        <Button id=\"five\" onClick={handleDigit} value=\"5\" />\n        <Button id=\"six\" onClick={handleDigit} value=\"6\" />\n        <Button id=\"subtract\" onClick={handleOperator} value=\"-\" />\n\n        <Button id=\"one\" onClick={handleDigit} value=\"1\" />\n        <Button id=\"two\" onClick={handleDigit} value=\"2\" />\n        <Button id=\"three\" onClick={handleDigit} value=\"3\" />\n        <Button id=\"add\" onClick={handleOperator} value=\"+\" />\n        <Button id=\"zero\" onClick={handleDigit} value=\"0\" />\n        <Button id=\"decimal\" onClick={handleDigit} value=\".\" />\n        <Button id=\"percentage\" onClick={handlePercentage} value=\"%\" />\n        <Button id=\"equals\" onClick={handleEquals} value=\"=\" />\n       </>\n      }\n    />\n      )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}